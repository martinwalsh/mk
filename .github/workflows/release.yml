# Taken from ripgrep with modifications
#
# References:
# - https://github.com/BurntSushi/ripgrep
# - https://github.com/mitsuhiko/rye
# - https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: release

# Only do the release on x.y.z tags.
on:
  push:
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: "Release version"
        required: true


# We need this to be able to create releases.
permissions:
  contents: write

jobs:
  # The create-release job runs purely to initialize the GitHub release itself,
  # and names the release after the `x.y.z` tag that was pushed. It's separate
  # from building the release so that we only create the release once.
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get the release version from the tag
        run: |
          echo "VERSION=${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_ENV
          echo "version=${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_OUTPUT
        id: version

      - name: Show the version
        run: |
          echo "version is: $VERSION"

      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.version.outputs.version }}" \
            --draft --verify-tag --title "${{ steps.version.outputs.version }}" \
            --generate-notes
    outputs:
      version: ${{ steps.version.outputs.version }}


  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Bump this as appropriate. We pin to a version to make sure CI
      # continues to work as cross releases in the past have broken things
      # in subtle ways.
      CROSS_VERSION: v0.2.5
      # Emit backtraces on panics.
      # RUST_BACKTRACE: 1
    strategy:
      fail-fast: true
      matrix:
        include:
        - build: linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-musl
          name: x86_64-linux
        - build: linux-arm
          os: ubuntu-latest
          rust: stable
          target: aarch64-unknown-linux-musl
          name: aarch64-linux
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
          name: x86_64-macos
        - build: macos-arm
          os: macos-latest
          rust: stable
          target: aarch64-apple-darwin
          name: aarch64-macos

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Use Cross
        if: matrix.os == 'ubuntu-latest' && matrix.target != ''
        shell: bash
        run: |
          # In the past, new releases of 'cross' have broken CI. So for now, we
          # pin it. We also use their pre-compiled binary releases because cross
          # has over 100 dependencies and takes a bit to compile.
          dir="$RUNNER_TEMP/cross-download"
          mkdir "$dir"
          echo "$dir" >> $GITHUB_PATH
          cd "$dir"
          curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
          tar xf cross-x86_64-unknown-linux-musl.tar.gz
          echo "CARGO=cross" >> $GITHUB_ENV

      - name: Set target variables
        shell: bash
        run: |
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        shell: bash
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        shell: bash
        run: |
          ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
          echo "outfile=target/${{ matrix.target }}/release/mk" >> $GITHUB_OUTPUT
          echo "name=mk-${{ matrix.name }}" >> $GITHUB_OUTPUT
        id: binary

      - name: Create archive (Unix)
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          cp "${{ steps.binary.outputs.outfile }}" "${{ steps.binary.outputs.name }}"
          gzip "${{ steps.binary.outputs.name }}"
          shasum -a 256 "${{ steps.binary.outputs.name }}.gz" > "${{ steps.binary.outputs.name }}.gz.sha256"
          echo "asset=${{ steps.binary.outputs.name }}.gz" >> $GITHUB_OUTPUT
          echo "asset_sum=${{ steps.binary.outputs.name }}.gz.sha256" >> $GITHUB_OUTPUT
        id: archive

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          gh release upload \
            "${{ needs.create-release.outputs.version }}" \
            "${{ steps.archive.outputs.asset }}" \
            "${{ steps.archive.outputs.asset_sum }}"

  publish-release:
    name: publish-release
    needs: ['build-release', 'create-release']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Finalize Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release edit "${{ needs.create-release.outputs.version }}" --draft=false
