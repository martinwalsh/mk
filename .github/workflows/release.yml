# Taken from rye with modifications
#
# References:
# - https://github.com/mitsuhiko/rye
# - https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: release
on:
  workflow_dispatch:
    inputs:
      dry-run:
        type: choice
        description: "Dry Run"
        options:
          - "no"
          - "yes"
        required: true

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-22.04

    env:
      MK_DRY_RUN: ${{ github.event.inputs.dry-run || 'yes' }}

    outputs:
      mk_version: ${{ steps.version.outputs.version }}
      mk_dry_run: ${{ env.MK_DRY_RUN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get the release version from Cargo.toml
        shell: bash
        id: version
        run: |
          echo "version=$(awk '/^version = / { print $3 }' Cargo.toml)" >> "$GITHUB_OUTPUT"

      - name: Create GitHub release
        id: release
        if: env.MK_DRY_RUN != 'yes'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create --draft \
            --title "${{ steps.version.outputs.version }}" "${{ steps.version.outputs.version }}"

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, macos, macos-arm]
        include:
        - build: linux
          os: ubuntu-22.04
          rust: stable
          target: x86_64-unknown-linux-musl
          name: x86_64-linux
        - build: linux-arm
          os: ubuntu-22.04
          rust: stable
          target: aarch64-unknown-linux-musl
          name: aarch64-linux
        - build: macos
          os: macos-12
          rust: stable
          target: x86_64-apple-darwin
          name: x86_64-macos
        - build: macos-arm
          os: macos-12
          rust: stable
          target: aarch64-apple-darwin
          name: aarch64-macos

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}

    - name: Use Cross
      shell: bash
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Build release file
      shell: bash
      id: build-release-file
      run: |
        bin="mk-${{ matrix.name }}"

        cp "target/${{ matrix.target }}/release/mk" "$bin"
        gzip "$bin"
        python scripts/hash.py "$bin.gz" "sha256" > "$bin.gz.sha256"

        echo "archive=$bin.gz" >> "GITHUB_OUTPUT"
        echo "sha256=$bin.gz.sha256" >> "GITHUB_OUTPUT"

    - name: Upload release archive
      if: ${{ needs.create-release.outputs.mk_dry_run != 'yes' }}
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh release upload "${{ needs.create-release.outputs.mk_version }}" "${{ steps.build-release-file.outputs.archive }}"
        gh release upload "${{ needs.create-release.outputs.mk_version }}" "${{ steps.build-release-file.outputs.sha256 }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      if: ${{ needs.create-release.outputs.mk_dry_run != 'yes' }}
      with:
        name: ${{ steps.build-release-file.outputs.archive }}
        path: ${{ steps.build-release-file.outputs.archive }}

    - name: Upload artifact hash
      uses: actions/upload-artifact@v4
      if: ${{ needs.create-release.outputs.mk_dry_run != 'yes' }}
      with:
        name: ${{ steps.build-release-file.outputs.sha256 }}
        path: ${{ steps.build-release-file.outputs.sha256 }}
